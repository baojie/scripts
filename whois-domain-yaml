#!/usr/bin/env python
import sys
import fileinput
import subprocess
import re
from datetime import datetime
import redis

# Get expiration dates for a list of domains

client = redis.StrictRedis()


def call_whois(domain_name):
    print >> sys.stderr, '$ whois ' + domain_name
    return subprocess.check_output(['whois', domain_name])


class Domain(object):
    def __init__(self, name):
        self.name = name

    @property
    def whois(self):
        key = 'whois:%s' % self.name
        cached = client.get(key)
        if not cached or 'WHOIS LIMIT EXCEEDED' in cached:
            cached = call_whois(self.name)
            client.set(key, cached)
            client.expire(key, 60*60)  # cache for 1h
        return cached

    # searches = {'updated': re.compile('Updat\w+ Date:\s*(\d+-\w+-\d+)', re.I),
    #             'created': re.compile('Creat\w+ Date:\s*(\d+-\w+-\d+)', re.I), }

    @property
    def expires(self):
        # Look for day-monthname-year, first:
        #   Expiration Date: 04-jul-2014
        match = re.search(r'Expir\w+ Date:\s*(\d{1,2}-[a-z]{3,10}-\d{4})', self.whois, re.I)
        if match:
            return datetime.strptime(match.group(1), '%d-%b-%Y')
        # Fall back to:
        #   Expiration Date:2014-04-20T23:59:59.0Z (ISO 8601 + TZ)
        #   Only .pw uses this format.
        match = re.search(r'Expir\w+ Date:\s*(\d{4}-\d{2}-\d{2})', self.whois, re.I)
        if match:
            return datetime.strptime(match.group(1), '%Y-%m-%d')

        raise Exception('Could not find expiration date for %s: %s' % (self.name, self.whois))


text = ''.join(fileinput.input())
domains = [Domain(name) for name in re.findall('[-_A-Za-z.]+\.[\w+]+', text)]
print >> sys.stderr, '%d domains' % len(domains)

for domain in sorted(domains, key=lambda domain: domain.expires):
    print '{expires}\t{name}'.format(name=domain.name, expires=domain.expires.strftime('%Y-%m-%d'))
